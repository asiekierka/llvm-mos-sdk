-- Copyright (c) 2023 Adrian "asie" Siekierka
--
-- Licensed under the Apache License, Version 2.0 with LLVM Exceptions,
-- See https://github.com/llvm-mos/llvm-mos-sdk/blob/main/LICENSE for license
-- information.

local CONFIG_MAP = {
	-- mapper name (program argument)
	["anrom"] = {
		-- bits, value, comparator, step
		{4, "__prg_rom_size", ">log2", 32},
		-- bits, {0 == ignore, 1 == any}
		{1, 1},
		-- no bus conflicts (empty table) if...
		["none_if"] = "__submapper == 1"
	},
	["bnrom"] = {
		{8, "__prg_rom_size", ">log2", 32}
	},
	["cnrom"] = {
		{8, "(__chr_rom_size + __chr_ram_size + __chr_nvram_size)", ">log2", 8},
		["none_if"] = "__submapper == 1"
	},
	["gnrom"] = {
		{4, "__chr_rom_size", ">log2", 8},
		{4, "__prg_rom_size", ">log2", 32}
	},
	["unrom"] = {
		{8, "__prg_rom_size", ">log2", 16},
		["none_if"] = "__submapper == 1"
	},
	["unrom-512"] = {
		{5, "__prg_rom_size", ">log2", 16},
		{2, "(__chr_rom_size + __chr_ram_size + __chr_nvram_size)", ">log2", 8},
		{1, "(__mirroring == 0 && __four_screen == 1)", "=="},
		["none_if"] = "__battery == 1"
	}
}

print("/* Automatically generated by generate-rompoke-mapper-linkscript.lua. */")

local args = {...}
local config = CONFIG_MAP[args[1]]

-- calculate min, max values
local min_value = 0
local max_value = 0
local shift = 0

for i=1,#config do
	local part = config[i]
	local mask = ((1 << part[1]) - 1) << shift

	if part[2] ~= 0 then
		max_value = max_value | mask
		if part[2] == 1 then
			min_value = min_value | mask
		end
	end
	shift = shift + part[1]
end

-- build condition table
results = {}

function cond_append(cond, cond2)
	if #cond == 0 then
		return cond2
	else
		return cond .. " && " .. cond2
	end
end

function process_part(parts, value, cond, shift)
	if #parts == 0 then
		table.insert(results, {cond, value})
		return
	end

	-- iterate
	local head = parts[1]
	local tail = {}
	for i=2,#parts do
		tail[i - 1] = parts[i]
	end

	local mask = ((1 << head[1]) - 1) << shift
	local next_shift = shift + head[1]

	--- UNCONDITIONAL ---

	-- 0: ignore bit (unused)
	if head[2] == 0 then
		return
	end

	-- 1: any bit (can be 0 or 1 unconditionally)
	if head[2] == 1 then
		process_part(tail, value | mask, cond, next_shift)
		return
	end

	--- CONDITIONAL ---

	-- ">log2": use value, log2 progression
	if head[3] == ">log2" then
		local v = (1 << (head[1] - 1))
		while v > 0 do
			local v_compare = v * (head[4] or 1)
			process_part(tail, value | (((v << 1) - 1) << shift), cond_append(cond, head[2] .. " > " .. v_compare), next_shift)
			v = v >> 1
		end
		process_part(tail, value, cond, next_shift)
		return
	end

	-- "==": use value (true/false)
	if head[3] == "==" then
		process_part(tail, value | mask, cond_append(cond, head[2]), next_shift)
		process_part(tail, value, cond, next_shift)
		return
	end

	error("unknown condition: " .. head[3])
end

process_part(config, 0, "", 0)
table.sort(results, function(a, b)
	return a[2] > b[2]
end)

-- write output
io.write("__rom_poke_table_size = ")
if config["none_if"] ~= nil then
		io.write(string.format("(%s) ? %d : (", config["none_if"], 0))
end
for i=1,#results do
	if #results[i][1] == 0 then
		io.write(results[i][2])
	else
		io.write(string.format("(%s) ? %d : (", results[i][1], results[i][2]+1))
	end
end
for i=1,#results do
	if #results[i][1] ~= 0 then
		io.write(")")
	end
end
if config["none_if"] ~= nil then
	io.write(")")
end
print(";")
